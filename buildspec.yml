#version: 0.2


#phases:
  #pre_build:
    #commands:
    #  - echo Logging in to Amazon ECR...
     # - aws --version
      #- aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 955342901096.dkr.ecr.ap-south-1.amazonaws.com
      #- REPOSITORY_URI=955342901096.dkr.ecr.ap-south-1.amazonaws.com/sample
      #-COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      #- IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  #build:
    #commands:
      #- echo Build started on `date`
      #- echo Building the Docker image...
      #- docker build -t $REPOSITORY_URI:latest .
     # - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  #post_build:
    #commands:
      #- echo Build completed on `date`
      #- echo Pushing the Docker images...
      #- docker push $REPOSITORY_URI:latest
     # - docker push $REPOSITORY_URI:$IMAGE_TAG
     # - echo Writing image definitions file...
      #- printf '[{"name":"nodeapp","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      #- cat imagedefinitions.json 
#artifacts:
   # files: imagedefinitions.json
   version: 0.2
phases:
 install:
  runtime-versions:
      python: 3.9
  commands:
      - yum install pip -y
      - pip install boto3
 
 pre_build:
    commands:
        - ls
        - echo Logging in to Amazon ECR...
#       - aws --version
#       - ECR_LOGIN=$(aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $REPOSITORY_URI)
#       - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#      # - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
#  build:
#     commands:
#       - echo Build started on `date`
#       - echo Building the Docker image...
#       - docker build -t $REPOSITORY_URI:latest .
#       - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$CODEBUILD_BUILD_NUMBER
#  post_build:
#     commands:
#       - echo Build completed on `date`
#       - echo Pushing the Docker images...
#       - docker push $REPOSITORY_URI:$CODEBUILD_BUILD_NUMBER
#       - echo Writing image definitions file...
      
#       - echo "AWS Configure..."
#       - aws configure set aws_access_key_id $ACCESS_KEY
#       - aws configure set aws_secret_access_key $SECRET_KEY
    
#       - aws eks --region $REGION update-kubeconfig --name $EKS_CLUSTER
#       - kubectl get nodes
      
#       - echo "Fetching kubeconfig token..."
#       - export KUBECONFIG_TOKEN=$(aws eks get-token --region $REGION --cluster-name $EKS_CLUSTER --output json | jq -r '.status.token')

      
#     #   - echo "Installing Terraform..."
#     #   - curl -LO https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
#     #   - unzip terraform_1.0.0_linux_amd64.zip
#     #   - chmod +x terraform
#     #   - sudo mv terraform /usr/local/bin/
#     #   - terraform --version

#     #   - cd manifest
#     #   - terraform init
#     #   - terraform validate
#     #   - terraform plan 
#     #   - kubectl delete ns sample-python
#       - sed -i "s/latest/$CODEBUILD_BUILD_NUMBER/g" pythondeployment.yaml
#       - kubectl apply -f pythondeployment.yaml -n var
      
      
# # artifacts:
# #   files:
# #   - imagedefinitions.json
# #   - target/*.jar
